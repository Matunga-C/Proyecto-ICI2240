1 mostrarProductosStock rangos
2 mostrarVentasProductos rangos
3 grafoCompras
4 generar reporte
5 confirmar compra 

para agregar los grafos:

    1. agregar un historial de compras confirmadas para poder construir un grafos de ocurrencias
    2. implementar la funcion confirmar compra

    List* historialCompras(): cada posicion de esta lista es un producto con su total de unidades vendidas

    confirmarCompra(): recorre el carrito, aumentando su contador de vendidos, copiar los punteros al producto en una lista nueva List* compraHecha luego hacer un pushBack

    3. generarReporte(): 
        1. crear un grafo, con clave = nombre del producto, valor = mapa de ocurrencias
        2. recoorer la lista de historialCompras y por cada compra
           para cada par de (a, b) dentro de la misma compra, incrementar el grafo a-b y b-a
        3. analizar las co-ocurrencias para detectar combos fuertes

void confirmarCompra(List* carrito, List*historialCompras, HashMap* productosPorCodigo){
    limpiarPantalla();

    if(list_first(carrito) == NULL){
        printf("El carrito está vacío. No se puede confirmar la compra.\n");
        presioneTeclaParaContinuar();
        return;
    }

    List* compraHecha = list_create();

    Producto* producto = list_first(carrito);
    while (producto != NULL) {
        // Busca el producto en el inventario
        hola
        Pair* pair = searchMap(productosPorCodigo, producto->codigoBarras);
        if (pair != NULL) { 
            Producto* prodInventario = (Producto*)pair->value;
            // Aumenta el contador de vendidos
            prodInventario->vendidos += producto->stock;
            // Agrega el producto al historial de compras
            list_pushBack(compraHecha, prodInventario);
        }
        
        producto = list_next(carrito);
    }    

    // Agrega la compra hecha al historial de compras
    list_pushBack(historialCompras, compraHecha);

    // Limpia el carrito
    while (list_first(carrito) != NULL) {
        Producto* prod = list_popCurrent(carrito);
        free(prod); // Libera la memoria del producto
    }
    printf("Compra confirmada exitosamente.\n");

    // Agregar mostrar los productos comprados y el total de la compra
}

void guardarInventario(HashMap* productosPorCodigo) {
    limpiarPantalla();
    char nombreArchivo[100] = "inventario_guardado.csv";
    FILE* archivo = fopen(nombreArchivo, "w");
    if (!archivo) {
        printf("No se pudo abrir el archivo para guardar.\n");
        presioneTeclaParaContinuar();
        return;
    }
    // Escribir encabezado
    fprintf(archivo, "ID, Nombre,Marca,Categoria,CodigoBarras,Stock,PrecioVenta,PrecioMercado,PrecioCosto,Vendidos\n");
    Pair* pair = firstMap(productosPorCodigo);
    size_t idx = 0;
    while (pair != NULL) {
        Producto* producto = (Producto*)pair->value;
        fprintf(archivo, "%zu,%s,%s,%s,%s,%d,%.2f,%.2f,%.2f,%d\n",idx++,
            producto->nombre,
            producto->marca,
            producto->categoria,
            producto->codigoBarras,
            producto->stock,
            producto->precioVenta,
            producto->precioMercado,
            producto->precioCosto,
            producto->vendidos
        );
        pair = nextMap(productosPorCodigo);
        idx++;
    }
    fclose(archivo);
    printf("Inventario guardado en '%s'.\n", nombreArchivo);
    presioneTeclaParaContinuar();
}

void insertarFrecuencia(HashMap *graph, char *nameA, char *nameB){
    
    Pair* parA = searchMap(graph, nameA);
    if(!parA){
        HashMap* relations = createMap(2000);
        insertMap(graph, nameA, relations);
        parA = searchMap(graph, nameA);
    }

    HashMap* relationsA = (HashMap*)parA->value;
    Pair* parB = searchMap(relationsA, nameB);
    if(parB){
       int* frecuency = (int*)parB->value;
       (*frecuency)++;
    }
    else{
        int* newFrecuency = malloc(sizeof(int));
        *newFrecuency = 1;
        insertMap(relationsA, nameB, newFrecuency);
    }
}

void confirmarCompra(List* carrito, List*historialCompras, HashMap* productosPorCodigo){
    limpiarPantalla();

    if(list_first(carrito) == NULL){
        printf("El carrito está vacío. No se puede confirmar la compra.\n");
        presioneTeclaParaContinuar();
        return;
    }

    List* compraHecha = list_create();

    Producto* producto = list_first(carrito);
    while (producto != NULL) {
        // Busca el producto en el inventario
        Pair* pair = searchMap(productosPorCodigo, producto->codigoBarras);
        if (pair != NULL) {
            Producto* prodInventario = (Producto*)pair->value;
            // Aumenta el contador de vendidos
            prodInventario->vendidos += producto->stock;
            // Agrega el producto al historial de compras
            list_pushBack(compraHecha, prodInventario);
        }
        
        producto = list_next(carrito);
    }    

    // Agrega la compra hecha al historial de compras
    list_pushBack(historialCompras, compraHecha);

    // Limpia el carrito
    while (list_first(carrito) != NULL) {
        Producto* prod = list_popCurrent(carrito);
        free(prod); // Libera la memoria del producto
    }
    printf("Compra confirmada exitosamente.\n");

    // Agregar mostrar los productos comprados y el total de la compra
}

void insertarFrecuenciaGrafo(HashMap* graph, Producto* prodA, Producto* prodB);

void generarReporte(HashMap *productosPorCodigo, HashMap *productosPorCategoria, List *historialCompras);

void verCarrito(List *carrito);

void sugerirPromociones(HashMap *productosPorCodigo, HashMap *productosPorCategoria);


void insertarFrecuencia(HashMap *graph, char *nameA, char *nameB);

globalizar productos

arreglar funcion mostrar compra

generar el balance 

Generar Reporte mostrar el historial de compras

